datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Repo {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  repoId   String
  repoUrl  String
  active   Boolean  @default(true)
  username String?
  Refact   Refact[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  avatar        String?
  firstAccess   Boolean   @default(true)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Refact {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  description String
  filePath    String
  createdAt   DateTime @default(now())
  repo        Repo     @relation(fields: [repoId], references: [id])
  repoId      String   @db.ObjectId
}
